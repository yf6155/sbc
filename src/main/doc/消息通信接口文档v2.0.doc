
        <html xmlns:v="urn:schemas-microsoft-com:vml"
        xmlns:o="urn:schemas-microsoft-com:office:office"
        xmlns:w="urn:schemas-microsoft-com:office:word"
        xmlns="http://www.w3.org/TR/REC-html40">
        <head><meta http-equiv=Content-Type content="text/html;  
        charset=utf-8">
        <style type="text/css">
            table  
            {  
                border-collapse: collapse;
                border: none;  
                width: 100%;  
            }  
            td  
            {  
                border: solid #CCC 1px;  
            }  
            .codestyle{
                word-break: break-all;
                background:silver;mso-highlight:silver;
            }
        </style>
        <meta name=ProgId content=Word.Document>
        <meta name=Generator content="Microsoft Word 11">
        <meta name=Originator content="Microsoft Word 11">
        <xml><w:WordDocument><w:View>Print</w:View></xml></head>
        <body><h1>1、SBC需求文档</h1><div style="margin-left:0px;"><h2>1.1、SBC需求文档</h2><div style="margin-left:0px;"><p>项目时段：12月低：</p>
<p>需求大致流程：登录后注册ws session</p>
<p>消息可能带图片（再讨论）  -已实现图片传输和入库等功能</p>
<p>一：私聊场景：
（需要考虑异常场景—发送消息过程中用户下线，需要将消息暂存到数据库）：</p>
<p>用户A – 服务器S – 用户B</p>
<p>二：通知:
群发：不管在线与否，都发送
单发：userId</p>
<p>userId:int
WebSocket
数据库：mysql</p>
<p>数据库框架Mybatis</p></div></div><h1>2、SBC接口文档</h1><div style="margin-left:0px;"><h2>2.1、WS握手</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>用户登录后，可调用此接口创建WebSocket链接，使用户链接到WebSocket服务器。</li>
</ul>
<p><strong>请求URL：</strong> </p>
<ul>
<li><code>ws://localhost:8080/chat/superBarChat</code></li>
</ul>
<p><strong>请求方式：</strong></p>
<ul>
<li>POST </li>
</ul>
<p><strong>参数：</strong> </p>
<ul>
<li>无参数</li>
</ul>
<p><strong>示例：</strong> </p>
<ul>
<li>在JS页面中使用new WebSocket("ws://ip:端口/chat/superBarChat");</li>
</ul></div><h2>2.2、WS握手后添加监听</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>
<p>Websocket创建连接后，在JS文件中添加Websocket相关监听事件</p>
<p><strong>WebSocket 事件</strong></p>
</li>
</ul>
<table width='100%' class='codestyle'><pre><code>  事件    事件处理程序  描述
  open   Socket.onopen  连接建立时触发
  message  Socket.onmessage 客户端接收服务端数据时触发
  error Socket.onerror  通信发生错误时触发
  close Socket.onclose  连接关闭时触发}</code></pre></table>
<p><strong>WebSocket 方法</strong></p>
<table width='100%' class='codestyle'><pre><code>  方法    描述
Socket.send()   使用连接发送数据

Socket.close()  关闭连接</code></pre></table>
<ul>
<li>参考资料
<a href="https://www.runoob.com/html/html5-websocket.html">https://www.runoob.com/html/html5-websocket.html</a></li>
</ul></div><h2>2.3、WS发送通知（全体/单人）</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>通知公告接口</li>
</ul>
<p><strong>请求URL：</strong> </p>
<ul>
<li><code>http://IP:端口/chat/addAdvice</code></li>
</ul>
<p><strong>请求方式：</strong></p>
<ul>
<li>POST </li>
</ul>
<p><strong>参数：</strong> </p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th style="text-align: left;">参数名</th>
<th style="text-align: left;">必选</th>
<th style="text-align: left;">类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">adto</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">AdviceDataTransferObject</td>
<td>公告数据传输对象</td>
</tr>
</tbody>
</table>
<p><strong>全体通知公告</strong>
通过请求参数AdviceDataTransferObject中adviceSendType变量进行区分。
1：全体通知
2：单人通知
（多个接收人,请求入参中acceptUserIdStr可通过英文逗号连接接收用户，形如：1,2,3）
<strong>返回示例</strong></p>
<table width='100%' class='codestyle'><pre><code>  {
    {resCode: 0, resMessage: null, resObject: null}
  }</code></pre></table>
<p><strong>返回参数说明</strong> </p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th style="text-align: left;">参数名</th>
<th style="text-align: left;">类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">cr</td>
<td style="text-align: left;">ControllerResponse</td>
<td>响应吗resCode，0：成功；1：未知；2：失败</td>
</tr>
</tbody>
</table>
<p><strong>备注</strong> </p>
<ul>
<li>更多返回错误代码请看首页的错误代码描述</li>
</ul></div><h2>2.4、WS发送消息（群聊）</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>Websocket群发聊天消息（预留功能）</li>
</ul>
<p><strong>请求：</strong> </p>
<ul>
<li><code>Websocket.send(消息)</code></li>
</ul>
<p><strong>消息参数：</strong> </p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th style="text-align: left;">参数名</th>
<th style="text-align: left;">必选</th>
<th style="text-align: left;">类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">messageType</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>消息类型</td>
</tr>
<tr>
<td style="text-align: left;">fromUserId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>发送用户Id</td>
</tr>
<tr>
<td style="text-align: left;">toUserId</td>
<td style="text-align: left;">否</td>
<td style="text-align: left;">string</td>
<td>接收用户Id</td>
</tr>
<tr>
<td style="text-align: left;">payload</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>消息内容</td>
</tr>
</tbody>
</table>
<p><strong>示例</strong></p>
<table width='100%' class='codestyle'><pre><code>        var msg = document.getElementById("msg").value;

        var dto = {
            messageType: "chatotm",
            fromUserId: userId,
            toUserId: "",
            payload: msg
        };

        var sendInfo = JSON.stringify(dto);

        ws.send(sendInfo);</code></pre></table>
<p><strong>备注</strong> </p>
<ul>
<li>消息类型枚举类：com.superbar.chat.config.enums.MessageTypeEnum</li>
<li>群聊消息中toUserId非必传参数</li>
</ul></div><h2>2.5、WS发送消息（私聊）</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>Websocket单发聊天消息</li>
</ul>
<p><strong>请求：</strong> </p>
<ul>
<li><code>Websocket.send(消息)</code></li>
</ul>
<p><strong>消息参数：</strong> </p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th style="text-align: left;">参数名</th>
<th style="text-align: left;">必选</th>
<th style="text-align: left;">类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">messageType</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>消息类型</td>
</tr>
<tr>
<td style="text-align: left;">fromUserId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>发送用户Id</td>
</tr>
<tr>
<td style="text-align: left;">toUserId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>接收用户Id</td>
</tr>
<tr>
<td style="text-align: left;">payload</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>消息内容</td>
</tr>
</tbody>
</table>
<p><strong>示例</strong></p>
<table width='100%' class='codestyle'><pre><code>        var msg = document.getElementById("msg").value;

        var dto = {
            messageType: "chatoto",
            fromUserId: userId,
            toUserId: "",
            payload: msg
        };

        var sendInfo = JSON.stringify(dto);

        ws.send(sendInfo);</code></pre></table>
<p><strong>备注</strong> </p>
<ul>
<li>消息类型枚举类：com.superbar.chat.config.enums.MessageTypeEnum</li>
<li>单聊消息中toUserId是必传参数</li>
</ul></div><h2>2.6、用户登录接口（Session级别）</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>添加用户至Session中，后续WebSocket创建链接时会从Session中获取用户userId信息。</li>
<li>此Session是浏览器级别，浏览器关闭则session关闭。</li>
</ul>
<p><strong>请求URL：</strong> </p>
<ul>
<li><code>http://IP:端口/chat/addUser</code></li>
</ul>
<p><strong>请求方式：</strong></p>
<ul>
<li>POST </li>
</ul>
<p><strong>参数：</strong> </p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th style="text-align: left;">参数名</th>
<th style="text-align: left;">必选</th>
<th style="text-align: left;">类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">userId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>用户Id</td>
</tr>
</tbody>
</table>
<p><strong>无返回</strong></p></div><h2>2.7、查询与当前用户聊天的总用户数</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>查询与当前用户聊天的用户总用户数量，方便分页计算分页使用。</li>
</ul>
<p><strong>请求URL：</strong> </p>
<ul>
<li><code>http://IP:端口/chat/getChatUserCount</code></li>
</ul>
<p><strong>请求方式：</strong></p>
<ul>
<li>GET </li>
</ul>
<p><strong>参数：</strong> </p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th style="text-align: left;">参数名</th>
<th style="text-align: left;">必选</th>
<th style="text-align: left;">类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">userId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>用户Id</td>
</tr>
</tbody>
</table>
<p><strong>无返回</strong></p></div><h2>2.8、获取登录用户的聊天列表（全量）</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>获取当前登录用的聊天列表，即该用户与哪些用户有过聊天动作。</li>
<li>此功能在数据量小的时候可以使用，否则不建议是使用。</li>
</ul>
<p><strong>请求URL：</strong> </p>
<ul>
<li><code>http://IP:端口/chat/getChatUserList</code></li>
</ul>
<p><strong>请求方式：</strong></p>
<ul>
<li>GET </li>
</ul>
<p><strong>参数：</strong> </p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th style="text-align: left;">参数名</th>
<th style="text-align: left;">必选</th>
<th style="text-align: left;">类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">userId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>用户Id</td>
</tr>
</tbody>
</table>
<p><strong>返回</strong></p>
<ul>
<li>返回当前用户聊天用户的列表信息（User实体类对象）</li>
</ul></div><h2>2.9、获取登录用户的聊天列表（分页）</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>分页查询获取当前登录用的聊天列表，即该用户与哪些用户有过聊天动作。</li>
</ul>
<p><strong>请求URL：</strong> </p>
<ul>
<li><code>http://IP:端口/chat/getChatUserListByPage</code></li>
</ul>
<p><strong>请求方式：</strong></p>
<ul>
<li>GET </li>
</ul>
<p><strong>参数：</strong> </p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th style="text-align: left;">参数名</th>
<th style="text-align: left;">必选</th>
<th style="text-align: left;">类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">userId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>用户Id</td>
</tr>
<tr>
<td style="text-align: left;">pageNo</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>页码</td>
</tr>
<tr>
<td style="text-align: left;">pageSize</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>分页大小</td>
</tr>
</tbody>
</table>
<p><strong>返回</strong></p>
<ul>
<li>返回当前用户聊天用户的列表信息（User实体类对象）</li>
</ul></div><h2>2.10、定时任务（离线消息推送）</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>离线消息推送，在用户再次登录链接Websocket后，进行离线消息定时推送，当前频率是每5秒轮询一次</li>
</ul>
<p><strong>请求方式：</strong></p>
<ul>
<li>
<p>Spring Scheduler </p>
<p><strong>实现代码位置</strong>
com\superbar\chat\websocket\handler\SuperBarChatHandler.java中sendOfflineMsg方法</p>
</li>
</ul></div><h2>2.11、定时任务（通知公告推送）</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>通知公告推送，轮训当前已经登录的Websocket用户，进行用户的通知公告定时推送，当前频率是每5秒</li>
</ul>
<p><strong>请求方式：</strong></p>
<ul>
<li>
<p>Spring Scheduler </p>
<p><strong>实现代码位置</strong>
com\superbar\chat\scheduler\AdvicePushScheduler.java中pushAdvicesTask方法</p>
</li>
<li>更多返回错误代码请看首页的错误代码描述</li>
</ul></div><h2>2.12、消息列表总条数查询</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>查询用户与聊天用户的消息总记录数，方便进行分页计算使用。</li>
</ul>
<p><strong>请求URL：</strong> </p>
<ul>
<li><code>http://IP:端口/chat/getMsgCount</code></li>
</ul>
<p><strong>请求方式：</strong></p>
<ul>
<li>GET </li>
</ul>
<p><strong>参数：</strong> </p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th style="text-align: left;">参数名</th>
<th style="text-align: left;">必选</th>
<th style="text-align: left;">类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">userId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>登录用户Id</td>
</tr>
<tr>
<td style="text-align: left;">chatUserId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>消息接收用户Id</td>
</tr>
</tbody>
</table>
<p><strong>返回</strong></p>
<ul>
<li>以数组方式返回聊天记录。</li>
</ul></div><h2>2.13、消息列表获取（分页）</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>查询用户与聊天用户的消息列表，按照页码和页容量查询返回，按照发送时间升序排列。</li>
</ul>
<p><strong>请求URL：</strong> </p>
<ul>
<li><code>http://IP:端口/chat/getMsgByPage</code></li>
</ul>
<p><strong>请求方式：</strong></p>
<ul>
<li>GET </li>
</ul>
<p><strong>参数：</strong> </p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th style="text-align: left;">参数名</th>
<th style="text-align: left;">必选</th>
<th style="text-align: left;">类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">userId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>登录用户Id</td>
</tr>
<tr>
<td style="text-align: left;">chatUserId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>消息接收用户Id</td>
</tr>
<tr>
<td style="text-align: left;">pageNo</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>页码</td>
</tr>
<tr>
<td style="text-align: left;">pageSize</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>页容量</td>
</tr>
</tbody>
</table>
<p><strong>备注</strong>
pageNo（页码）参数必须从1开始。
pageSize（页容量）参数必须大于1.</p>
<p><strong>返回</strong></p>
<ul>
<li>以数组方式返回聊天记录。</li>
</ul></div><h2>2.14、消息列表获取（全量）</h2><div style="margin-left:0px;"><p><strong>简要描述：</strong> </p>
<ul>
<li>查询用户与聊天用户的消息列表，所有消息列表，按照发送时间升序排列。</li>
</ul>
<p><strong>请求URL：</strong> </p>
<ul>
<li><code>http://IP:端口/chat/getMsg</code></li>
</ul>
<p><strong>请求方式：</strong></p>
<ul>
<li>GET </li>
</ul>
<p><strong>参数：</strong> </p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th style="text-align: left;">参数名</th>
<th style="text-align: left;">必选</th>
<th style="text-align: left;">类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">userId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>登录用户Id</td>
</tr>
<tr>
<td style="text-align: left;">chatUserId</td>
<td style="text-align: left;">是</td>
<td style="text-align: left;">string</td>
<td>消息接收用户Id</td>
</tr>
</tbody>
</table>
<p><strong>返回</strong></p>
<ul>
<li>以数组方式返回聊天记录。</li>
</ul></div></div><h1>3、SBC设计文档</h1><div style="margin-left:0px;"><h2>3.1、数据库设计</h2><div style="margin-left:0px;"><p>聊天消息表：
CREATE TABLE <code>t_msg</code> (
<code>msgid</code> INT(11) NOT NULL AUTO_INCREMENT COMMENT '消息主键',
<code>msgtype</code> VARCHAR(20) NOT NULL COMMENT '消息类型（对应MessageTypeEnum）' COLLATE 'utf8_general_ci',
<code>contenttype</code> CHAR(1) NOT NULL COMMENT '消息内容类型（1：文本；2：图片）' COLLATE 'utf8_general_ci',
<code>textmsg</code> MEDIUMTEXT NULL COMMENT '文本消息' COLLATE 'utf8_general_ci',
<code>fromuserid</code> INT(11) NOT NULL COMMENT '消息发送用户',
<code>touserid</code> INT(11) NULL DEFAULT NULL COMMENT '消息接收用户',
<code>ctimestamp</code> TIMESTAMP NOT NULL COMMENT '消息创建时间戳',
<code>status</code> CHAR(1) NOT NULL COMMENT '消息状态（0：未发送 2：已发送（在线实时发送） 3：已发送（离线暂存补发））' COLLATE 'utf8_general_ci',
<code>lastutimestamp</code> TIMESTAMP NOT NULL COMMENT '消息最后修改时间戳',
PRIMARY KEY (<code>msgid</code>) USING BTREE,
INDEX <code>T_MSG_IDX_01</code> (<code>fromuserid</code>, <code>touserid</code>)
)
COMMENT='用户间聊天消息记录表'
COLLATE='utf8mb4_general_ci'
ENGINE=InnoDB
AUTO_INCREMENT=6
;</p>
<p>通知公告主表：
CREATE TABLE <code>t_advice</code> (
<code>adviceid</code> INT(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
<code>fromuserid</code> INT(11) NULL DEFAULT NULL COMMENT '通知公告来源用户',
<code>advicetype</code> CHAR(1) NOT NULL COMMENT '通知公告类型（1：系统（公告）  2：无意义（预留） 3：导师申请消息（师生关系的申请跳转对方详情页） 4：动态消息（点赞，评论，@ 跳转相应的动态） 5：关注消息（跳转到我的关注列表）6：导师申请通过（跳转我的导师列表） 7：评论消息（回复，点赞，跳转到相应的评论） 8：回复消息（点赞，跳转到相应的回复））' COLLATE 'utf8mb4_general_ci',
<code>advicesendtype</code> CHAR(1) NOT NULL COMMENT '通知公告发送类型（1：全体通知；2：单人通知）' COLLATE 'utf8mb4_general_ci',
<code>advicecontent</code> MEDIUMTEXT NULL COMMENT '通知公告文本内容' COLLATE 'utf8mb4_general_ci',
<code>relationid</code> INT(11) NULL DEFAULT NULL COMMENT '关联id',
<code>deleted</code> INT(1) NULL DEFAULT NULL COMMENT '是否删除',
<code>status</code> INT(1) NULL DEFAULT NULL COMMENT '读取状态（1：未读取 2：已读取）',
<code>created_date</code> TIMESTAMP NOT NULL COMMENT '通知公告创建时间戳',
<code>updated_date</code> TIMESTAMP NULL DEFAULT NULL COMMENT '通知公告最后更新时间戳',
PRIMARY KEY (<code>adviceid</code>) USING BTREE
)
COMMENT='通知公告表'
COLLATE='utf8mb4_general_ci'
ENGINE=InnoDB
AUTO_INCREMENT=10
;</p>
<p>通知公告状态控制表：
CREATE TABLE <code>t_advicestatus</code> (
<code>adviceid</code> INT(11) NOT NULL COMMENT '通知公告id',
<code>touserid</code> INT(11) NOT NULL COMMENT '接收公告用户id',
<code>fromuserid</code> INT(11) NULL DEFAULT NULL COMMENT '来源用户id',
<code>status</code> CHAR(1) NOT NULL COMMENT '通知公告推送状态（0：未推送 1：已推送）' COLLATE 'utf8_general_ci',
<code>ctimestamp</code> TIMESTAMP NOT NULL COMMENT '创建时间戳',
<code>lastutimestamp</code> TIMESTAMP NULL DEFAULT NULL COMMENT '最后更新时间戳',
PRIMARY KEY (<code>adviceid</code>, <code>touserid</code>) USING BTREE
)
COMMENT='通知公告状态表'
COLLATE='utf8mb4_general_ci'
ENGINE=InnoDB
;</p></div><h2>3.2、工程相关说明</h2><div style="margin-left:0px;"><p>1:工程配置文件
sbc\src\main\resources\config\application.yml</p>
<p>2:工程测试页面
sbc\src\main\resources\templates\chat.html</p>
<p>3:工程测试方式
启动工程后，浏览器中键入地址（端口根据application.yml中制定的profile和port录入即可）：<a href="http://localhost:8080/chat/index">http://localhost:8080/chat/index</a></p></div></div></body></html>